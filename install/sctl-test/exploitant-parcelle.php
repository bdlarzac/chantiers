<?php
/******************************************************************************
    Teste les associations entre parcelles et exploitants
    
    @copyright  BDL, Bois du Larzac
    @license    GPL
    @history    2019-11-07 16:12:42+01:00, Thierry Graff : Creation
********************************************************************************/
/*
Table contenant les détails des exploitants (adresse mail tel etc.)
Exploita
Contient un acteur SCTL stable entre 2018 et 2020
(IdExploitant = 28 ; NUMEXP = 52)

Tables où on trouve des liens parcelles / exploitants :
Recad
    IdParcelle
    IdExploitant
SubdivCadastre
    IdParcelle
    IdExploitant                               
Subdivision
    IdParcelle
    IdExploitant

Conclusions :
- on laisse tomber Recad
- on utilise Subdivision, qui est plus complète que SubdivCadastre

Dans logiciel de Claude :
claude-DisqueE/D3Dev/Ghis/Graphique/PSqlAccess.pas

function SqlListeDesParcellesCadastreDeExploitantNew()
    FROM SubdivCadastre
    LEFT JOIN Parcelle ON SubdivCadastre.[IdParcelle] = Parcelle.IdParcelle
    LEFT JOIN Exploita ON SubdivCadastre.IdExploitant = Exploita.IdExploitant

function  SqlListeDesParcellesFermageDeExploitantNew()
    FROM Subdivision
    LEFT JOIN Parcelle ON Subdivision.IdParcelle = Parcelle.IdParcelle
    LEFT JOIN Fermage ON Subdivision.IdFermage = Fermage.IdFermage
    LEFT JOIN Exploita ON Subdivision.IdExploitant = Exploita.IdExploitant
*/

require_once 'lib-php/csvAssociative.php';

$config = yaml_parse(file_get_contents('../../config.yml'));
$datadir = $config['dev']['sctl-data'];
$outdir = $config['dev']['sctl-analyse'];

// versions de la base SCTL
$versions = [
    '2018',
    '2020-02-27',
    '2020-03-02',
    '2020-03-06',
    '2020-12-16',
];
$csvdirs = [];
foreach($versions as $version){
    $csvdirs[$version] = $datadir . '/csv-' . $version;
}

compare_tables("$datadir/csv-2018");
//test_evolutionExploita($datadir, $csvdirs, $outdir);
//test_evolutionIdsDansExploita($csvdirs);
// ******************************************************
/**
    Compare les 3 tables avec la table Exploita, pour une version de la base
    Résultats :
        Exploita : 104
        Recad : 97
        SubdivCadastre : 103
        Subdivision : 103
        diff Exploita - Recad : 101 102 103 104 105 106 107 108 109 110
        diff Exploita - SubdivCadastre : 23
        diff Exploita - Subdivision : 23
        == 1 PERSONNE
          Dans Subdivision et pas dans SubdivCadastre : 2108
**/
function compare_tables($csvDir){
    
    $tables = ['Recad', 'SubdivCadastre', 'Subdivision'];
    
    $exp =[];
    $csv = csvAssociative::compute($csvDir . '/Exploita.csv');
    foreach($csv as $row){
        $exp[$row['IdExploitant']] = $row['NOMEXP'];
    }
    $keysExp = array_keys($exp);
    echo 'Exploita : ' . count($exp) . "\n";
    
    $data = [];
    foreach($tables as $table){
        $data[$table] = [];
        $csv = csvAssociative::compute($csvDir . '/' . $table . '.csv');
        foreach($csv as $row){
            if(!isset($data[$table][$row['IdExploitant']])){
                $data[$table][$row['IdExploitant']] = [];
            }
            $data[$table][$row['IdExploitant']][] = $row['IdParcelle'];
        }
    }
    foreach($tables as $table){
        foreach($data[$table] as $k => $v){
            $data[$table][$k] = array_unique($v);
        }
    }
    
    foreach($tables as $table){
        echo "$table : " . count($data[$table]) . "\n";
    }
    
    $keys = [];
    foreach($tables as $table){
        $keys[$table] = array_keys($data[$table]);
        $diff = array_diff($keysExp, $keys[$table]);
        echo "diff Exploita - $table : " . implode(' ', $diff) . "\n";
    }
    
    // on laisse tomber recad
    
    foreach($data['SubdivCadastre'] as $idE => $idsP){
        $diff1 = array_diff($idsP, $data['Subdivision'][$idE]);
        $diff2 = array_diff($data['Subdivision'][$idE], $idsP);
        if(count($diff1) == 0 && count($diff2) == 0){
            continue;
        }
        echo "== $idE " . $exp[$idE] . "\n";
        if(count($diff1) != 0){
            echo '  Dans SubdivCadastre et pas dans Subdivision : ' . implode(' ', $diff1) . "\n";
        }
        if(count($diff2) != 0){
            echo '  Dans Subdivision et pas dans SubdivCadastre : ' . implode(' ', $diff2) . "\n";
        }
    }
}

// ******************************************************
/**
    Construit un csv avec les ids et noms des exploitants
    pour différentes versions de la table Exploita
    Conclusions :
    - IdExploitant est lié à un bail (?)
        cf 94 GREFFIER D.-  BLANC M.    => BLANC - LEVI
        cf 86 POULANGES                 => ALLAIN / de ANGELIS
    - NUMEXP est lié à une personne (?)
**/
function test_evolutionExploita($datadir, $csvdirs, $outdir){
    $outfile = $outdir . '/evolution-Exploita.csv';
    $res = [];
    foreach($csvdirs as $key => $dir){
        $in = csvAssociative::compute("$dir/Exploita.csv");
        foreach($in as $line){
            $idExp = $line['IdExploitant'];
            if(!isset($res[$idExp])){
                $res[$idExp] = [];
            }
            $res[$idExp][$key] = ['NOMEXP' => $line['NOMEXP'], 'NUMEXP' => $line['NUMEXP']];
        }
    }
    // generate output
    $out = 'IdEx;';
    $outKeys = ['IdEx'];
    foreach(array_keys($csvdirs) as $key){
        $out .= "NOMEXP-$key;NUMEXP-$key;";
        $outKeys[] = "NOMEXP-$key";
        $outKeys[] = "NUMEXP-$key";
    }
    $out = substr($out, 0, -1) . "\n";
    foreach($res as $idExp => $elt){
        $new = array_fill_keys($outKeys, '');
        $new['IdEx'] = $idExp;
        foreach($elt as $k1 => $v1){
            foreach($v1 as $k2 => $v2){
                $new["$k2-$k1"] = $v2;
            }
        }
        $out .= implode(';', $new) . "\n";
    }
    file_put_contents($outfile, $out);
    echo "Wrote $outfile\n";
}

// ******************************************************
/**
    Teste si les associations IdExploitant - NUMEXP dans la table Exploita sont stables dans le temps
    Résultat :
    L'association IdExploitant - NUMEXP n'est jamais modifiée
    IdExploitant et NUMEXP ont l'air équivalents.
**/
function test_evolutionIdsDansExploita($csvdirs){
    $NUMEXP_IdExploitant = $IdExploitant_NUMEXP = [];
    foreach($csvdirs as $key => $dir){
        $in = csvAssociative::compute("$dir/Exploita.csv");
        foreach($in as $line){
            $NUMEXP = $line['NUMEXP'];
            $IdExploitant = $line['IdExploitant'];
            if(!isset($NUMEXP_IdExploitant[$NUMEXP])){
                $NUMEXP_IdExploitant[$NUMEXP] = [];
            }
            if(!isset($IdExploitant_NUMEXP[$IdExploitant])){
                $IdExploitant_NUMEXP[$IdExploitant] = [];
            }
            $NUMEXP_IdExploitant[$NUMEXP][] = $IdExploitant;
            $IdExploitant_NUMEXP[$IdExploitant][] = $NUMEXP;
        }
    }
    //
    $test_NUMEXP_unique = $test_IdExploitant_unique = [];
    foreach($NUMEXP_IdExploitant as $NUMEXP => $val){
        $val = array_unique($val);
        if(count($val) != 1){
            $test_NUMEXP_unique[] = $val;
        }
    }
    foreach($IdExploitant_NUMEXP as $IdExploitant => $val){
        $val = array_unique($val);
        if(count($val) != 1){
            $test_IdExploitant_unique[] = $val;
        }
    }
    //
    echo "NUMEXP correspondant à plusieurs IdExploitan :\n";
    echo "\n"; print_r($test_NUMEXP_unique); echo "\n";
    echo "IdExploitan correspondant à plusieurs NUMEXP :\n";
    echo "\n"; print_r($test_IdExploitant_unique); echo "\n";
}